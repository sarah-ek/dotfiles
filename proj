#!/usr/bin/env python3
import argparse
import sys
import shutil
from os import chdir
from pathlib import Path
from subprocess import run


def init(name, author, email):
    Path(name).mkdir()
    chdir(name)
    if email is None:
        email = "<>"
    if author is not None:
        run(["git", "init"], check=True)
        run(["git", "checkout", "-b", "main"], check=True)
        run(["git", "config", "--local", "user.name", author], check=True)
        run(["git", "config", "--local", "user.email", email], check=True)
        run(["git", "commit", "--allow-empty", "-m", "Initial commit"], check=True)


def write_to_file(filename, text):
    with open(filename, "w") as file:
        file.write(text)


def cpp(name, author, email, standard_version, enable_gcc_extensions):
    arg_dict = {
        "project_name": name,
        "author": author,
        "standard_version": str(standard_version),
        "enable_gcc_extensions": "ON" if enable_gcc_extensions else "OFF",
    }

    top_level_cmake = (
        """\
cmake_minimum_required(VERSION 3.16)
project(%(project_name)s CXX)

get_directory_property(has_parent PARENT_DIRECTORY)
if (has_parent)
  set(top_level FALSE)
else()
  set(top_level TRUE)
endif()

set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})

if(ENABLE_DOCS_ONLY)
  add_subdirectory("docs")
  return()
endif()

if(top_level AND ENABLE_TESTING)
  set(CMAKE_CXX_STANDARD 17)
  set(CMAKE_CXX_EXTENSIONS OFF)
endif()

include(cmake/compiler_warnings.cmake)
include(cmake/static_analyzers.cmake)
include(cmake/sanitizers.cmake)
include(cmake/conan.cmake)

add_library(%(project_name)s INTERFACE)
target_include_directories(
  %(project_name)s INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Conan dependencies
set(CONAN_REQUIRES
    # Boost Software License 1.0
    boost/1.76.0
    #
    # MIT License
    fmt/8.0.0
    backward-cpp/1.5
    #
    # Mozilla Public License 2.0
    eigen/3.3.9
    #
    # LGPL v3
    mpfr/4.1.0
)
target_compile_definitions(
  %(project_name)s INTERFACE SPDLOG_FMT_EXTERNAL gsl_CONFIG_DEFAULTS_VERSION=1
)
set(CONAN_OPTIONS)
run_conan()

target_link_libraries(
  %(project_name)s
  INTERFACE CONAN_PKG::boost
            CONAN_PKG::fmt
            CONAN_PKG::eigen
            CONAN_PKG::mpfr
)

if(top_level AND ENABLE_TESTING)
  add_library(project_warnings INTERFACE)
  add_library(project_options INTERFACE)

  target_link_libraries(
    %(project_name)s
    INTERFACE project_options
              project_warnings
  )

  include(cmake/extra_local_settings.cmake)

  set_project_warnings(project_warnings)

  enable_sanitizers(project_options)
  option(ENABLE_PCH "Enable Precompiled Headers" OFF)
  if(ENABLE_PCH)
    target_precompile_headers(
      project_options
      INTERFACE
      <vector>
      <string>
      <map>
      <utility>
    )
  endif()

  enable_testing()
  add_subdirectory(test)
  add_subdirectory(benchmark)
endif()
"""
        % arg_dict
    )

    test_cmake = (
        """\
include(../cmake/doctest.cmake)

include_directories(include)

add_library(doctest_main STATIC src/doctest_main.cpp)
add_library(backward_cpp_main OBJECT src/backward.cpp)
target_link_libraries(backward_cpp_main CONAN_PKG::backward-cpp)
set(testlibs %(project_name)s backward_cpp_main doctest_main)
"""
        % arg_dict
    )

    benchmark_cmake = (
        """\
include_directories(include)

add_library(nanobench_main STATIC src/nanobench_main.cpp)
target_link_libraries(backward_cpp_main CONAN_PKG::backward-cpp)
set(benchlibs %(project_name)s backward_cpp_main nanobench_main)
"""
        % arg_dict
    )

    docs_cmake = (
        """\
function(enable_doxygen)
  set(DOXYGEN_GENERATE_XML YES)
  set(DOXYGEN_CALLER_GRAPH YES)
  set(DOXYGEN_CALL_GRAPH YES)
  set(DOXYGEN_EXTRACT_ALL YES)
  find_package(Doxygen REQUIRED dot)
  doxygen_add_docs(doxygen-docs ${PROJECT_SOURCE_DIR}/include)
endfunction()

enable_doxygen()

find_package(Sphinx REQUIRED)
set(SPHINX_SOURCE ${CMAKE_CURRENT_SOURCE_DIR})
set(SPHINX_BUILD ${CMAKE_CURRENT_BINARY_DIR}/sphinx)

add_custom_target(
  sphinx ALL
  DEPENDS doxygen-docs
  COMMAND
    ${SPHINX_EXECUTABLE} -b html
    -Dbreathe_projects.%(project_name)s=${CMAKE_CURRENT_BINARY_DIR}/xml
    ${SPHINX_SOURCE} ${SPHINX_BUILD}
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  COMMENT "Generating documentation with Sphinx"
)
"""
        % arg_dict
    )

    docs_index = (
        """\
%(project_name)s
=======================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

:ref:`genindex`

Docs
====
"""
        % arg_dict
    )

    docs_conf = (
        """\
import subprocess, os

read_the_docs_build = os.environ.get('READTHEDOCS', None) == 'True'
if read_the_docs_build:
    subprocess.call(
        'mkdir -p build && cd build && '
        'cmake -DENABLE_DOCS_ONLY=ON ../.. && '
        'make doxygen-docs',
        shell=True)
    breathe_projects = {'%(project_name)s': 'build/docs/xml'}

project = "%(project_name)s"
author = "%(author)s"
extensions = ["breathe"]
templates_path = ["_templates"]
exclude_patterns = ["_build"]
html_static_path = []
html_theme = "sphinx_rtd_theme"
breathe_default_project = "%(project_name)s"
"""
        % arg_dict
    )

    init(name, author, email)
    Path("src").mkdir()
    Path("include").mkdir()
    Path("test/src").mkdir(parents=True)
    Path("test/include").mkdir()
    Path("benchmark/src").mkdir(parents=True)
    Path("benchmark/include").mkdir()
    Path("docs").mkdir()

    write_to_file("CMakeLists.txt", top_level_cmake)
    write_to_file("test/CMakeLists.txt", test_cmake)
    write_to_file("benchmark/CMakeLists.txt", benchmark_cmake)
    write_to_file("docs/CMakeLists.txt", docs_cmake)
    write_to_file("docs/index.rst", docs_index)
    write_to_file("docs/conf.py", docs_conf)
    write_to_file("docs/requirements.txt", "breathe\ncmake\n")

    return """\
cp --recursive $DOTDIR/cpp/cmake cmake &&               \
cp $DOTDIR/cpp/doctest.h test/include &&                \
cp $DOTDIR/cpp/doctest_main.cpp test/src &&             \
cp $DOTDIR/cpp/backward.cpp test/src &&                 \
cp $DOTDIR/cpp/nanobench.h benchmark/include &&         \
cp $DOTDIR/cpp/nanobench_main.cpp benchmark/src &&      \
cp $DOTDIR/cpp/clang-tidy .clang-tidy &&                \
cp $DOTDIR/cpp/cmake-format.yaml .cmake-format.yaml &&  \
cp $DOTDIR/cpp/clang-tidy .clang-tidy &&                \
cp $DOTDIR/cpp/clang-format .clang-format               \
            """


def python(name, author, email):
    init(name, author, email)
    main_file = """def main():
    pass
if __name__ == "__main__":
    main()
"""
    write_to_file("main.py", main_file)
    return ""


def main():
    sys.tracebacklimit = 0
    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--lang", type=str, help="project language")
    parser.add_argument("name", help="Project name")
    parser.add_argument("-a", "--author", type=str, help="author name")
    parser.add_argument("-e", "--email", type=str, help="author email")

    args = parser.parse_args()
    if args.lang is None:
        Path(args.name).mkdir()
        post_command = ""

    elif args.lang.startswith(("cxx", "cpp", "c++", "gnu++")):
        try:
            version = int(args.lang[-2:])
        except ValueError:
            version = 20
        enable_gcc_extensions = args.lang.startswith("gnu++")
        post_command = cpp(
            args.name, args.author, args.email, version, enable_gcc_extensions
        )
    elif args.lang in ["python"]:
        post_command = python(args.name, args.author, args.email)
    else:
        raise ValueError("Unrecognized language")
    print(post_command)
    print(args.name)


if __name__ == "__main__":
    main()
